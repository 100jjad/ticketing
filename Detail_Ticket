package com.example.ssoheyli.ticketing_newdesign.Ticket;

import android.Manifest;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.ContentResolver;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Typeface;
import android.media.MediaRecorder;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.support.annotation.Nullable;
import android.support.constraint.ConstraintLayout;
import android.support.design.widget.FloatingActionButton;
import android.support.v4.app.ActivityCompat;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.StaggeredGridLayoutManager;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.webkit.MimeTypeMap;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.Toast;

import com.agrawalsuneet.dotsloader.loaders.LazyLoader;
import com.devlomi.record_view.OnBasketAnimationEnd;
import com.devlomi.record_view.OnRecordListener;
import com.devlomi.record_view.RecordButton;
import com.devlomi.record_view.RecordView;
import com.example.ssoheyli.ticketing_newdesign.Helpfull.API;
import com.example.ssoheyli.ticketing_newdesign.Helpfull.Config;
import com.example.ssoheyli.ticketing_newdesign.Helpfull.FilePath;
import com.example.ssoheyli.ticketing_newdesign.Model.Detail_TicketlisModel;
import com.example.ssoheyli.ticketing_newdesign.Model.Model_GetCreatDetail;
import com.example.ssoheyli.ticketing_newdesign.Model.Model_GetDetailTicket;
import com.example.ssoheyli.ticketing_newdesign.Model.Model_GetResFile;
import com.example.ssoheyli.ticketing_newdesign.Model.Model_PostTicketDetail;
import com.example.ssoheyli.ticketing_newdesign.Model.Model_getTypeFile;
import com.example.ssoheyli.ticketing_newdesign.R;
import com.example.ssoheyli.ticketing_newdesign.TestActivities.ChatTestActivity;


import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.TimeUnit;

import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;


/**
 * Created by s.soheyli on 10/29/2018.
 */

public class Detail_Ticket_List extends Activity {
    Ticket_Detaillist_Adapter update = new Ticket_Detaillist_Adapter(this);
    RecyclerView rcv;
    private static final String TAG = SendTicket2.class.getSimpleName();
    private String selectedFilePath;
    private static final int PICK_FILE_REQUEST = 1;
    private ImageView fab;
    boolean flagfile = false;
    boolean flagvoice = false;
    int ticketdetailid;
    Animation btnanim;
    String outputFile;
    static String type = "";
    String name = "";
    String Address = "";
    SQLiteDatabase db;
    List<Model_GetDetailTicket> detaillist;
    ArrayList<Detail_TicketlisModel> temp;
    ArrayList<Detail_TicketlisModel> empty;
    static String[] typearray;
    static String[] typearray2;
    static String typefile = "nofile";
    MediaRecorder myRecorder = new MediaRecorder();
    public static final int RECORD_AUDIO = 0;
    public static final int WRITE_EXTERNAL_STORAGE = 0;
    static int sendnumber = 0;
    boolean attach = false;
    LazyLoader lp;

    RecordView recordView;
    RecordButton recordButton;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.detail_ticket_send4);
        final LinearLayout btnchoosefile;
        final FloatingActionButton btnsend;
        fab = findViewById(R.id.sendbtn);
        final EditText edtmessage;
        btnsend = findViewById(R.id.bnsend);
        btnchoosefile = findViewById(R.id.bnchoosfile);
        edtmessage = findViewById(R.id.etmessage);
        btnanim = AnimationUtils.loadAnimation(this, R.anim.button_anim1);
        lp = findViewById(R.id.dl);

        recordView = findViewById(R.id.record_view);
        recordButton = findViewById(R.id.record_button);
        recordButton.setRecordView(recordView);

        Typeface atf = Typeface.createFromAsset(getAssets(), "roboto-regular.ttf");
        edtmessage.setTypeface(atf);

        outputFile = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS) + "/file_recorded.3gpp";

        if (ActivityCompat.checkSelfPermission(Detail_Ticket_List.this, Manifest.permission.RECORD_AUDIO) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(Detail_Ticket_List.this, new String[]{Manifest.permission.RECORD_AUDIO},
                    RECORD_AUDIO);
        } else {
            outputFile = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS) + "/file_recorded.3gpp";
            myRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
            myRecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
            myRecorder.setAudioEncoder(MediaRecorder.OutputFormat.AMR_NB);
            myRecorder.setOutputFile(outputFile);
        }


        getList();

        btnchoosefile.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                btnchoosefile.startAnimation(btnanim);
                showFileChooser();
            }
        });

        // voice recorder
        recordView.setOnRecordListener(new OnRecordListener() {
            @Override
            public void onStart() {
                //Start Recording..
                recordView.bringToFront();
                start(recordView);
                btnchoosefile.setVisibility(View.INVISIBLE);
                edtmessage.setVisibility(View.INVISIBLE);
            }

            @Override
            public void onCancel() {
                //On Swipe To Cancel
                recordView.bringToFront();
                recordView.invalidate();
                btnchoosefile.setVisibility(View.VISIBLE);
                edtmessage.setVisibility(View.VISIBLE);

                stop(recordView);

                myRecorder = new MediaRecorder();
            }

            @Override
            public void onFinish(long recordTime) {
                //Stop Recording..
                String time = getHumanTimeText(recordTime);
                edtmessage.setText("فایل صوتی ضمیمه شد");
                recordButton.setVisibility(View.INVISIBLE);
                fab.setVisibility(View.VISIBLE);

                btnchoosefile.setVisibility(View.VISIBLE);
                edtmessage.setVisibility(View.VISIBLE);

                flagvoice = true;
                stop(recordView);

                myRecorder = new MediaRecorder();
                outputFile = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS) + "/file_recorded.3gpp";
                myRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
                myRecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
                myRecorder.setAudioEncoder(MediaRecorder.OutputFormat.AMR_NB);
                myRecorder.setOutputFile(outputFile);
            }

            @Override
            public void onLessThanSecond() {
                //When the record time is less than One Second
                btnchoosefile.setVisibility(View.VISIBLE);
                edtmessage.setVisibility(View.VISIBLE);
            }
        });
        recordView.setOnBasketAnimationEndListener(new OnBasketAnimationEnd() {
            @Override
            public void onAnimationEnd() {
            }
        });

        edtmessage.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {

            }

            @Override
            public void afterTextChanged(Editable s) {
                if (s.length() > 0) {
                    recordButton.setVisibility(View.INVISIBLE);
                    fab.setVisibility(View.VISIBLE);
                } else {
                    recordButton.setVisibility(View.VISIBLE);
                    fab.setVisibility(View.INVISIBLE);
                }
            }
        });

        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                fab.startAnimation(btnanim);
                if (edtmessage.getText().toString().equals("")) {
                    Toast.makeText(Detail_Ticket_List.this, "لطفا متن پیام را وارد کنید", Toast.LENGTH_SHORT).show();
                }
                else {
                    Retrofit retrofit2 = new Retrofit.Builder().baseUrl(Config.getBaseUrl()).addConverterFactory(GsonConverterFactory.create()).build();

                    API myApi = retrofit2.create(API.class);
                    Model_PostTicketDetail model_postTicketDetail = new Model_PostTicketDetail();
                    model_postTicketDetail.setDescription(edtmessage.getText().toString());
                    model_postTicketDetail.setToken(Config.getToken(getApplicationContext()));
                    model_postTicketDetail.setTicketid(TicketList.ticketid);
                    Call<Model_GetCreatDetail> model = myApi.creatticketdetail(model_postTicketDetail);
                    model.enqueue(new Callback<Model_GetCreatDetail>() {
                        @Override
                        public void onResponse(Call<Model_GetCreatDetail> call, Response<Model_GetCreatDetail> response) {
                            if (response.isSuccessful()) {
                                int result = response.body().getResult();
                                if (result == -4) {
                                    Toast.makeText(Detail_Ticket_List.this, "لطفا برای ثبت تیکت دوباره وارد برنامه شوید", Toast.LENGTH_LONG).show();
                                } else if (result == 0) {
                                    Toast.makeText(Detail_Ticket_List.this, "امکان ارسال تیکت وجود ندارد", Toast.LENGTH_LONG).show();
                                } else if (result == -1) {
                                    Toast.makeText(Detail_Ticket_List.this, "خطا از سمت سرور لطفا با پشتیبانی تماس بگیرید", Toast.LENGTH_LONG).show();
                                } else if (result > 0) {
                                    ticketdetailid = result;
                                    if (flagfile) {
                                        flagfile = false;
                                        attach = true;
                                        String t = "nofile";
                                        String temp = "";
                                        temp = selectedFilePath.substring(selectedFilePath.length() - 4, selectedFilePath.length());
                                        Toast.makeText(Detail_Ticket_List.this, "" + temp, Toast.LENGTH_SHORT).show();
                                        if (temp.equals(".png")) {
                                            t = ".png";
                                        }
                                        if (temp.equals("jpeg")) {
                                            t = ".jpeg";
                                        }
                                        if (temp.equals(".jpg")) {
                                            t = ".jpg";
                                        }
                                        if (temp.equals(".doc")) {
                                            t = ".jpeg";
                                        }
                                        String[] temptype = new String[typearray2.length + 1];
                                        temptype[0] = t;
                                        for (int j = 1; j < typearray2.length + 1; j++) {
                                            temptype[j] = typearray2[j - 1];
                                        }

                                        typearray2 = new String[temptype.length];
                                        for (int h = 0; h < temptype.length; h++) {
                                            typearray2[h] = temptype[h];
                                        }
                                        uploadFile(selectedFilePath);
                                        getList();
                                    }
                                    if (flagvoice) {
                                        attach = true;
                                        flagvoice = false;
                                        uploadFile(outputFile);
                                        String[] temptype = new String[typearray2.length + 1];
                                        temptype[0] = ".3gpp";
                                        for (int j = 1; j < typearray2.length + 1; j++) {
                                            temptype[j] = typearray2[j - 1];
                                        }
                                        typearray2 = new String[temptype.length];
                                        for (int h = 0; h < temptype.length; h++) {
                                            typearray2[h] = temptype[h];
                                        }

                                    }
                                    if (!attach) {
                                        String[] temptype;
                                        int size = typearray2.length + 1;
                                        temptype = new String[size];
                                        temptype[0] = "nofile";
                                        for (int j = 1; j < typearray2.length + 1; j++) {
                                            temptype[j] = typearray2[j - 1];
                                        }
                                        typearray2 = new String[temptype.length];
                                        for (int h = 0; h < temptype.length; h++) {
                                            typearray2[h] = temptype[h];
                                        }
                                        getList();
                                    }

                                    edtmessage.setText("");
                                }

                            } else {
                                Toast.makeText(Detail_Ticket_List.this, "خطای سرور 1091", Toast.LENGTH_SHORT).show();
                            }
                        }

                        @Override
                        public void onFailure(Call<Model_GetCreatDetail> call, Throwable t) {
                            Toast.makeText(Detail_Ticket_List.this, "خطای سرور 1092", Toast.LENGTH_SHORT).show();
                        }
                    });
                }

            }
        });

    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == Activity.RESULT_OK) {
            if (requestCode == PICK_FILE_REQUEST) {
                if (data == null) {
                    return;
                }

                flagfile = true;
                Uri selectedFileUri = data.getData();
                selectedFilePath = FilePath.getPath(this, selectedFileUri);
                Log.i(TAG, "مسیر فایل انتخابی:" + selectedFilePath);

                if (selectedFilePath != null && !selectedFilePath.equals("")) {

                    Toast.makeText(Detail_Ticket_List.this, selectedFilePath, Toast.LENGTH_SHORT).show();
                    fab.setVisibility(View.VISIBLE);
                    recordButton.setVisibility(View.INVISIBLE);
                } else {
                    Toast.makeText(this, "Cannot upload file to server", Toast.LENGTH_SHORT).show();
                }
            }
        }
    }

    public void getList() {
        String key = TicketList.hashkey;


        Retrofit retrofit2 = new Retrofit.Builder().baseUrl(Config.getBaseUrl()).addConverterFactory(GsonConverterFactory.create()).build();
        API myApi2 = retrofit2.create(API.class);
        Call<List<Model_GetDetailTicket>> model = myApi2.get_detail_ticket_list(key, Config.getToken(getApplicationContext()));
        model.enqueue(new Callback<List<Model_GetDetailTicket>>() {
            @Override
            public void onResponse(Call<List<Model_GetDetailTicket>> call, Response<List<Model_GetDetailTicket>> response) {
                lp.setVisibility(View.INVISIBLE);
                if (response.isSuccessful()) {
                    detaillist = response.body();
                    typearray = new String[detaillist.size()];
                    typearray2 = new String[detaillist.size()];
                    temp = new ArrayList<>();
                    update.entries = new ArrayList<>(temp);

                    for (int i = 0; i < detaillist.size(); i++) {
                        if (detaillist.get(i).getAttachfile()) {
                            Retrofit retrofit2 = new Retrofit.Builder().baseUrl(Config.getBaseUrl()).addConverterFactory(GsonConverterFactory.create()).build();
                            API myApi2 = retrofit2.create(API.class);
                            Call<Model_getTypeFile> model = myApi2.Get_file("" + detaillist.get(i).getTicketdetailid(), Config.getToken(getApplicationContext()));
                            final int finalI = i;
                            final int finalI2 = i;
                            model.enqueue(new Callback<Model_getTypeFile>() {
                                @Override
                                public void onResponse(Call<Model_getTypeFile> call, Response<Model_getTypeFile> response) {
                                    if (response.isSuccessful()) {
                                        String type = response.body().getType();
                                        Detail_TicketlisModel enrty = new Detail_TicketlisModel(detaillist.get(finalI2).getDescription(), detaillist.get(finalI2).getDate(), detaillist.get(finalI2).getId(), detaillist.get(finalI2).getTicketdetailid(), type);
                                        temp.add(enrty);
                                        update.entries.add(enrty);
                                        sort(update.entries);
                                        rcv = (RecyclerView) findViewById(R.id.rv);
                                        StaggeredGridLayoutManager layout = new StaggeredGridLayoutManager(1, StaggeredGridLayoutManager.VERTICAL);
                                        layout.setReverseLayout(true);
                                        rcv.setLayoutManager(layout);
                                        update.notifyDataSetChanged();
                                        rcv.setAdapter(update);
                                        attach = false;
                                    } else {
                                        Toast.makeText(getApplicationContext(), "خطا در دریافت فایل ها", Toast.LENGTH_SHORT).show();
                                        Detail_TicketlisModel enrty = new Detail_TicketlisModel(detaillist.get(finalI2).getDescription(), detaillist.get(finalI2).getDate(), detaillist.get(finalI2).getId(), detaillist.get(finalI2).getTicketdetailid(), "nofile");
                                        temp.add(enrty);
                                        update.entries.add(enrty);
                                        sort(update.entries);
                                        rcv = (RecyclerView) findViewById(R.id.rv);
                                        StaggeredGridLayoutManager layout = new StaggeredGridLayoutManager(1, StaggeredGridLayoutManager.VERTICAL);
                                        layout.setReverseLayout(true);
                                        rcv.setLayoutManager(layout);
                                        update.notifyDataSetChanged();
                                        rcv.setAdapter(update);
                                        attach = false;
                                    }

                                }

                                @Override
                                public void onFailure(Call<Model_getTypeFile> call, Throwable t) {
                                    Toast.makeText(getApplicationContext(), "خطا در درخواست فایل ها", Toast.LENGTH_SHORT).show();
                                    Detail_TicketlisModel enrty = new Detail_TicketlisModel(detaillist.get(finalI2).getDescription(), detaillist.get(finalI2).getDate(), detaillist.get(finalI2).getId(), detaillist.get(finalI2).getTicketdetailid(), "nofile");
                                    temp.add(enrty);
                                    update.entries.add(enrty);
                                    sort(update.entries);
                                    rcv = (RecyclerView) findViewById(R.id.rv);
                                    StaggeredGridLayoutManager layout = new StaggeredGridLayoutManager(1, StaggeredGridLayoutManager.VERTICAL);
                                    layout.setReverseLayout(true);
                                    rcv.setLayoutManager(layout);
                                    update.notifyDataSetChanged();
                                    rcv.setAdapter(update);
                                    attach = false;
                                }
                            });
                        } else {
                            Detail_TicketlisModel enrty = new Detail_TicketlisModel(detaillist.get(i).getDescription(), detaillist.get(i).getDate(), detaillist.get(i).getId(), detaillist.get(i).getTicketdetailid(), "nofile");
                            temp.add(enrty);
                            update.entries.add(enrty);
                            sort(update.entries);
                            rcv = (RecyclerView) findViewById(R.id.rv);
                            StaggeredGridLayoutManager layout = new StaggeredGridLayoutManager(1, StaggeredGridLayoutManager.VERTICAL);
                            layout.setReverseLayout(true);
                            rcv.setLayoutManager(layout);
                            update.notifyDataSetChanged();
                            rcv.setAdapter(update);
                            attach = false;
                        }

                    }
                } else {
                    Toast.makeText(Detail_Ticket_List.this, "خطای سرور 1071", Toast.LENGTH_SHORT).show();
                }
            }

            @Override
            public void onFailure(Call<List<Model_GetDetailTicket>> call, Throwable t) {
                lp.setVisibility(View.INVISIBLE);
                Toast.makeText(Detail_Ticket_List.this, "خطای سرور 1072", Toast.LENGTH_SHORT).show();
            }
        });
    }

    private void showFileChooser() {
        Intent intent = new Intent();
        intent.setType("*/*");
        intent.setAction(Intent.ACTION_GET_CONTENT);
        startActivityForResult(Intent.createChooser(intent, "انتخاب فایل برای ارسال ..."), PICK_FILE_REQUEST);
    }

    public void uploadFile(final String selectedFilePath) {

        File file = new File(selectedFilePath);
        String[] parts = selectedFilePath.split("/");
        final String fileName = parts[parts.length - 1];
        Retrofit retrofit2 = new Retrofit.Builder().baseUrl(Config.getBaseUrl()).addConverterFactory(GsonConverterFactory.create()).build();
        Uri fileUri = Uri.parse(selectedFilePath);
        Uri fileUri2 = Uri.fromFile(file);
        API myApi = retrofit2.create(API.class);

        MediaType MEDIA_TYPE =
                MediaType.parse(getMimeType(fileUri2));

        RequestBody requestFile =
                RequestBody.create(
                        MEDIA_TYPE,
                        file
                );

        MultipartBody.Part body =
                MultipartBody.Part.createFormData("file", file.getName(), requestFile);


        String descriptionString = "" + ticketdetailid;
        RequestBody ticketdetailid =
                RequestBody.create(
                        MultipartBody.FORM, descriptionString);

        String descriptionString2 = "" + TicketList.ticketid;
        RequestBody userid =
                RequestBody.create(
                        MultipartBody.FORM, descriptionString2);


        String descriptionString3 = Config.getToken(getApplicationContext());
        RequestBody token =
                RequestBody.create(
                        MultipartBody.FORM, descriptionString3);

        Call<Model_GetResFile> model = myApi.sendfile(ticketdetailid, userid, token, body);
        model.enqueue(new Callback<Model_GetResFile>() {
            @Override
            public void onResponse(Call<Model_GetResFile> call, Response<Model_GetResFile> response) {
                if (response.isSuccessful()) {
                    int res = response.body().getResult();
                    if (res == -4) {
                        Toast.makeText(Detail_Ticket_List.this, "برای ارسال فایل لطفا دوباره وارد برنامه شوید", Toast.LENGTH_SHORT).show();
                    } else if (res == -2) {
                        Toast.makeText(Detail_Ticket_List.this, "فرمت فایل انتخاب شده معتبر نمی باشد", Toast.LENGTH_SHORT).show();
                    } else if (res == 0) {
                        Toast.makeText(Detail_Ticket_List.this, "فایل ثبت نشد", Toast.LENGTH_SHORT).show();
                    } else if (res == -1) {
                        Toast.makeText(Detail_Ticket_List.this, "سایز فایل باید کمتر از 2 مگابایت باشد", Toast.LENGTH_SHORT).show();
                    } else if (res > 0) {
                        Toast.makeText(Detail_Ticket_List.this, " ثبت فایل با موفقیت انجام شد", Toast.LENGTH_SHORT).show();
                        getList();
                    }
                } else {
                    Toast.makeText(Detail_Ticket_List.this, "خطای سرور 1081", Toast.LENGTH_SHORT).show();
                }
            }

            @Override
            public void onFailure(Call<Model_GetResFile> call, Throwable t) {
                Log.d(TAG, "Response" + t.getMessage());
                Toast.makeText(Detail_Ticket_List.this, "خطای سرور 1082", Toast.LENGTH_SHORT).show();
            }
        });

    }

    public void sort(List<Detail_TicketlisModel> entries) {
        int[] id = new int[entries.size()];
        empty = new ArrayList<>();
        for (int i = 0; i < entries.size(); i++) {
            id[i] = entries.get(i).getS5();
        }
        Arrays.sort(id);
        for (int j = entries.size() - 1; j > -1; j--) {
            for (int h = 0; h < entries.size(); h++) {
                if (id[j] == entries.get(h).getS5()) {
                    Detail_TicketlisModel temp = new Detail_TicketlisModel(entries.get(h).getS1(), entries.get(h).getS2(), entries.get(h).getS3(), entries.get(h).getS5(), entries.get(h).getType());
                    empty.add(temp);
                }
            }
        }
        update.entries = new ArrayList<>(empty);
    }

    public String getMimeType(Uri uri) {
        String mimeType = null;
        if (uri.getScheme().equals(ContentResolver.SCHEME_CONTENT)) {
            ContentResolver cr = getApplicationContext().getContentResolver();
            mimeType = cr.getType(uri);
        } else {
            String fileExtension = MimeTypeMap.getFileExtensionFromUrl(uri
                    .toString());
            mimeType = MimeTypeMap.getSingleton().getMimeTypeFromExtension(
                    fileExtension.toLowerCase());
        }
        return mimeType;
    }

    public void start(View view) {
        try {

            myRecorder.prepare();
            myRecorder.start();
        } catch (IllegalStateException e) {
            e.printStackTrace();
        } catch (IOException e) {
            // prepare() fails
            e.printStackTrace();
        }

    }

    public void stop(View view) {
        try {
            myRecorder.stop();
            myRecorder.release();
            myRecorder = null;

        } catch (IllegalStateException e) {
            //  it is called before start()
            e.printStackTrace();
        } catch (RuntimeException e) {
            // no valid audio/video data has been received
            e.printStackTrace();
        }
    }

    @SuppressLint("DefaultLocale")
    private String getHumanTimeText(long milliseconds) {
        return String.format("%02d:%02d",
                TimeUnit.MILLISECONDS.toMinutes(milliseconds),
                TimeUnit.MILLISECONDS.toSeconds(milliseconds) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(milliseconds))
        );
    }

    @Override
    public void onBackPressed() {
        if (recordButton.getVisibility() == View.VISIBLE) {
            super.onBackPressed();
        }
        // cancel voice
        recordButton.setVisibility(View.VISIBLE);
        fab.setVisibility(View.INVISIBLE);
    }

}
