package com.example.ssoheyli.ticketing_newdesign;

import android.content.Context;
import android.graphics.Typeface;
import android.support.annotation.NonNull;
import android.support.v4.app.Fragment;
import android.support.v4.view.PagerAdapter;
import android.support.v7.widget.StaggeredGridLayoutManager;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.example.ssoheyli.ticketing_newdesign.Helpfull.API;
import com.example.ssoheyli.ticketing_newdesign.Helpfull.Config;
import com.example.ssoheyli.ticketing_newdesign.Model.Model_Get_dashboard_Cash;
import com.example.ssoheyli.ticketing_newdesign.Model.Model_Get_dashboard_cmr;
import com.example.ssoheyli.ticketing_newdesign.Model.Model_Get_dashboard_invoce;
import com.example.ssoheyli.ticketing_newdesign.Model.Model_Get_dashboard_ticket;
import com.example.ssoheyli.ticketing_newdesign.Model.Model_Post_dashboard_cmr;
import com.example.ssoheyli.ticketing_newdesign.Model.Model_Post_dashboard_invoice;
import com.example.ssoheyli.ticketing_newdesign.Model.Model_Post_dashboard_ticket;
import com.example.ssoheyli.ticketing_newdesign.Model.dashbord_Model;

import java.util.ArrayList;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

public class viewpager_adapter_dashbord extends PagerAdapter
{
    int[] layout ;
    int res1=0 , res2=0 , res3=0 , res4=0;
    LayoutInflater layoutInflater;
    Context context;
    Fragment[] mFragment;
    String TAG;

    public viewpager_adapter_dashbord(int[] layout , Context context)
    {
        this.layout = layout;
        this.context = context;
        layoutInflater = (LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    }

    @Override
    public int getCount()
    {
        return layout.length;
    }

    @Override
    public boolean isViewFromObject(@NonNull View view, @NonNull Object o)
    {
        return view==o;
    }

    @NonNull
    @Override
    public Object instantiateItem(@NonNull final ViewGroup container, int position)
    {
        View view = layoutInflater.inflate(layout[position] , container , false);
        container.addView(view);
        if(position == 0)
        {
            TextView textView = view.findViewById(R.id.tv_value1);
            TextView textView2 = view.findViewById(R.id.tv_title1);
            Typeface atf = Typeface.createFromAsset(context.getAssets(), "irsans.ttf");
            textView.setTypeface(atf);
            textView2.setTypeface(atf);
            get_service();
            textView.setText(""+res1);
        }
        else if(position == 1)
        {
            TextView textView = view.findViewById(R.id.tv_value2);
            TextView textView2 = view.findViewById(R.id.tv_title2);
            Typeface atf = Typeface.createFromAsset(context.getAssets(), "irsans.ttf");
            textView.setTypeface(atf);
            textView2.setTypeface(atf);
            get_ticket();
            textView.setText(""+res2);
        }
        else if(position == 2)
        {
            TextView textView = view.findViewById(R.id.tv_value3);
            TextView textView2 = view.findViewById(R.id.tv_title3);
            Typeface atf = Typeface.createFromAsset(context.getAssets(), "irsans.ttf");
            textView.setTypeface(atf);
            textView2.setTypeface(atf);
            get_cash();
            textView.setText(""+res3);
        }
        else if(position == 3)
        {
            TextView textView = view.findViewById(R.id.tv_value4);
            TextView textView2 = view.findViewById(R.id.tv_title4);
            Typeface atf = Typeface.createFromAsset(context.getAssets(), "irsans.ttf");
            textView.setTypeface(atf);
            textView2.setTypeface(atf);
            get_invoice();
            textView.setText(""+res4);
        }
        return view;
    }

    @Override
    public void destroyItem(@NonNull ViewGroup container, int position, @NonNull Object object)
    {
        View view = (View) object;
        container.removeView(view);
    }



    public void get_service()
    {
        Retrofit retrofit2 = new Retrofit.Builder().baseUrl(Config.getBaseUrl()).addConverterFactory(GsonConverterFactory.create()).build();
        API myApi2 = retrofit2.create(API.class);
        Model_Post_dashboard_cmr model_post = new Model_Post_dashboard_cmr();
        model_post.setToken(Config.getToken(context));
        Call<Model_Get_dashboard_cmr> model = myApi2.get_dashboard_cmr(model_post);
        model.enqueue(new Callback<Model_Get_dashboard_cmr>() {
            @Override
            public void onResponse(Call<Model_Get_dashboard_cmr> call, Response<Model_Get_dashboard_cmr> response) {
                if(response.isSuccessful())
                {
                    res1 = response.body().getResult();
                }
                else
                {
                    Log.d(TAG , "Response" + response.toString());
                    Toast.makeText(context , context.getString(R.string.server_1281) , Toast.LENGTH_LONG).show();
                }
            }

            @Override
            public void onFailure(Call<Model_Get_dashboard_cmr> call, Throwable t)
            {
//                Toast.makeText(context, ""+t.toString(), Toast.LENGTH_SHORT).show();
                Toast.makeText(context , context.getString(R.string.server_1282) , Toast.LENGTH_LONG).show();
            }
        });

    }

    public void get_ticket()
    {

        Retrofit retrofit2 = new Retrofit.Builder().baseUrl(Config.getBaseUrl()).addConverterFactory(GsonConverterFactory.create()).build();
        API myApi2 = retrofit2.create(API.class);
        Model_Post_dashboard_ticket model_post = new Model_Post_dashboard_ticket();
        model_post.setCustomerId(Config.getuserid(context));
        Call<Model_Get_dashboard_ticket> model = myApi2.get_dashboard_ticket(model_post);
        model.enqueue(new Callback<Model_Get_dashboard_ticket>() {
            @Override
            public void onResponse(Call<Model_Get_dashboard_ticket> call, Response<Model_Get_dashboard_ticket> response)
            {
                if(response.isSuccessful())
                {
                    res2 = response.body().getResult();
                }
                else
                {
                    Log.d(TAG , "Response" + response.toString());
                    Toast.makeText(context , context.getString(R.string.server_1291) , Toast.LENGTH_LONG).show();
                }
            }

            @Override
            public void onFailure(Call<Model_Get_dashboard_ticket> call, Throwable t)
            {
//                Toast.makeText(context, ""+t.toString(), Toast.LENGTH_SHORT).show();
                Toast.makeText(context , context.getString(R.string.server_1292) , Toast.LENGTH_LONG).show();
            }
        });
    }

    public void get_cash()
    {
        Retrofit retrofit2 = new Retrofit.Builder().baseUrl(Config.getBaseUrl()).addConverterFactory(GsonConverterFactory.create()).build();
        API myApi2 = retrofit2.create(API.class);
        Model_Post_dashboard_cmr model_post = new Model_Post_dashboard_cmr();
        model_post.setToken(Config.getToken(context));
        Call<Model_Get_dashboard_Cash> model = myApi2.get_dashboard_cash(model_post);
        model.enqueue(new Callback<Model_Get_dashboard_Cash>() {
            @Override
            public void onResponse(Call<Model_Get_dashboard_Cash> call, Response<Model_Get_dashboard_Cash> response)
            {
                if(response.isSuccessful())
                {
                    res3 = response.body().getResultDouble();
                }
                else
                {
                    Toast.makeText(context , context.getString(R.string.server_1301) , Toast.LENGTH_LONG).show();
                }
            }

            @Override
            public void onFailure(Call<Model_Get_dashboard_Cash> call, Throwable t)
            {
//                Toast.makeText(context, ""+t.toString(), Toast.LENGTH_SHORT).show();
                Toast.makeText(context , context.getString(R.string.server_1302) , Toast.LENGTH_LONG).show();
            }
        });
    }

    public void get_invoice()
    {
        Retrofit retrofit2 = new Retrofit.Builder().baseUrl(Config.getBaseUrl()).addConverterFactory(GsonConverterFactory.create()).build();
        API myApi2 = retrofit2.create(API.class);
        Model_Post_dashboard_invoice model_post = new Model_Post_dashboard_invoice();
        model_post.setCustomer_id(Config.getuserid(context));
        model_post.setToken(Config.getToken(context));
        Call<Model_Get_dashboard_invoce> model = myApi2.get_dashboard_invoice(model_post);
        model.enqueue(new Callback<Model_Get_dashboard_invoce>() {
            @Override
            public void onResponse(Call<Model_Get_dashboard_invoce> call, Response<Model_Get_dashboard_invoce> response)
            {
                if(response.isSuccessful())
                {
                    res4 = response.body().getResult();

                }
                else
                {
                    Toast.makeText(context , context.getString(R.string.server_1311) , Toast.LENGTH_LONG).show();
                }
            }

            @Override
            public void onFailure(Call<Model_Get_dashboard_invoce> call, Throwable t)
            {
//                Toast.makeText(context, ""+t.toString(), Toast.LENGTH_SHORT).show();
                Toast.makeText(context , context.getString(R.string.server_1312) , Toast.LENGTH_LONG).show();
            }
        });
    }

}
